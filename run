#!/bin/bash

CPTOOL_DIR=`dirname $0`

source "$CPTOOL_DIR/util"

print_usage() {
  echo "Run"
  echo "  run competitive programming solution. The program will compiled first if not yet compiled. The program"
  echo "  will be killed if still running after some period of time, you can change this behaviour using --timeout"
  echo "  option"
  echo ""
  echo "Usage: cptool run [OPTION]... [LANGUAGE] SOLUTION"
  echo ""
  echo "Available commands:"
  echo "  -h --help           Show this help screen."
  echo "  --version           Show version."
  echo "  --hide-time         Hide time indicator"
  echo "  -t, --timeout TIME  Kill program if still running after TIME"
  echo "                      TIME is a floating point number with an optional suffix:"
  echo "                      's' for seconds (the default), 'm' for minutes, 'h' for hours or 'd' for days"
  echo "                      The default value of this option is 10s"
  echo ""
}

run_solution() {
  local hide_time="$HIDE_TIME"
  local timeout="$TIMEOUT"
  local language="$1"
  local solution="$2"

  $CPTOOL_DIR/compile "$language" "$solution"
  if [ $? -ne 0 ]; then
    exit $?
  fi

  local lang_folder=`get_language "$language"`
  if [ $? -eq 0 ]; then
    . "$lang_folder/lang.conf"
    if [ -z "$verbose_name" ]; then
      local verbose_name="$name";
    fi
    if [ -z "$extension" ]; then
      local extension="$language"
    fi

    local PROGRAM=`get_solution_target_path false "$language" "$solution"`
    if [ ! -f $PROGRAM ]; then
      echo_error "Error running solution: file $PROGRAM doesn't exists"
      exit 1
    fi

    export PROGRAM="$PROGRAM"
    if [ $hide_time = true ]; then
      eval "timeout -k $timeout $timeout \"$lang_folder/run\""
    else
      eval "time timeout -k $timeout $timeout \"$lang_folder/run\""
    fi

    if [ $? -eq 0 ]; then
      echo_success "Success running solution: $solution"
      exit 0
    else
      echo_error "Error running solution: run script failed"
      exit 1
    fi

  else
    echo_error "Error running solution: language definition doesn't exists"
    exit 1
  fi
}

DEFAULT_LANGUAGE="cpp"

HIDE_TIME=false
TIMEOUT=10s
LANGUAGE=""
SOLUTION=""

parsing_options=true
parsing_timeout=false
if [ $# -eq 0 ]; then
  print_usage
  exit 0
fi
for arg in "$@"
do
  if [ $parsing_options = true ]; then
    if [ $parsing_timeout = true ]; then
      parsing_timeout=false
      TIMEOUT=$arg
    elif [ $arg = "-h" ] || [ $arg = "--help" ]; then
      print_usage
      exit $?
    elif [ $arg = "--version" ]; then
      print_version
      exit $?
    elif [ $arg = "--hide-time" ]; then
      HIDE_TIME=true
    elif [ $arg = "-t" ] || [ $arg = "--timeout" ]; then
      parsing_timeout=true
    else
      parsing_options=false
      LANGUAGE=$arg
    fi
  elif [ -z "$SOLUTION" ]; then
    SOLUTION=$arg
  else
    print_usage
    exit 1
  fi
done

if [ -z "$LANGUAGE" ]; then
  echo "Error: please specify solution name."
  print_usage
  exit 1
elif [ -z "$SOLUTION" ]; then
  SOLUTION="$LANGUAGE"
  LANGUAGE="$DEFAULT_LANGUAGE"
fi

run_solution "$LANGUAGE" "$SOLUTION"
